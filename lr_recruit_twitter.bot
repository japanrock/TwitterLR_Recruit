#!/usr/bin/env ruby
# coding: utf-8

require 'rubygems'
require 'oauth'
require 'json'
require 'hpricot'
require 'open-uri'
require 'yaml'
require 'parsedate'
require "kconv"

### TODO:
### ・TwitterBaseクラスを外に出す

# Usage:
# ruby lr_recruit_twitter.rb /path/to/sercret_keys.yml

# TwitterのAPIとのやりとりを行うクラス
class TwitterBase
  def initialize
    # config.yml内のsercret_keys.ymlをloadします。
    @secret_keys = YAML.load_file(ARGV[0] || 'sercret_keys.yml')
  end
  
  def consumer_key
    @secret_keys["ConsumerKey"]
  end

  def consumer_secret
    @secret_keys["ConsumerSecret"]
  end

  def access_token_key
    @secret_keys["AccessToken"]
  end

  def access_token_secret
    @secret_keys["AccessTokenSecret"]
  end

  def consumer
    @consumer = OAuth::Consumer.new(
      consumer_key,
      consumer_secret,
      :site => 'http://twitter.com'
    )
  end

  def access_token
    consumer
    access_token = OAuth::AccessToken.new(
      @consumer,
      access_token_key,
      access_token_secret
    )
  end

  def post(tweet=nil)
    response = access_token.post(
      'http://twitter.com/statuses/update.json',
      'status'=> tweet
    )
  end
end

class LrRecruit
end

# MyNaviのテキストを扱うクラス
# TODO:
# 「会社説明会」「セミナー（２つ）」を別々のクラスで作る
class MyNavi < LrRecruit
  attr_reader :dates
  attr_reader :times
  attr_reader :prices
  
  def initialize
    @all_dates  = []
    @all_times = []
    @all_prices = []
    @dates  = []
    @times  = []
    @prices = []
  end

  def base_url
    "http://job.mynavi.jp/11/pc/NSSearchSeminarInfo.do?optNum=k74VXC&corpId=75729"
  end

  def feed
    (open_feed.search("td.date")).each do |elems|
        @all_dates << elems
    end

    (open_feed.search("td.time")).each do |elems|
        @all_times << elems
    end

    (open_feed.search("td.price")).each do |elems|
        @all_prices << elems
    end
  end

  def link
    "http://job.mynavi.jp/11/pc/NSSearchSeminarInfo.do?optNum=k74VXC&corpId=75729"
  end

  private
  # フィードをHpricotのオブジェクトにします。
  def open_feed
    Hpricot(open(base_url))
  end

  # 実行からどのくらい前までのフィードを取得するか
  def interval
    60 * 60 * 24 * 10
  end
end

twitter_base = TwitterBase.new
my_navi      = MyNavi.new
my_navi.feed

#my_navi.adc_maintenance_news_feed
#my_navi.titles.each_with_index do |title, index|
#  twitter_base.post(title + " - " + my_navi.link)
#end
